import java.util.Stack;
public class Solution {
    public static boolean isValidParenthesis(String s) {
        // Make an inbuilt stack.
        Stack<Character> st = new Stack<>();
        char x;

        // Traversing the Expression.
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{') {
                // Push the element in the stack.
                st.add(s.charAt(i));
                continue;
            }

        /* 
            If current current character is not opening 
            bracket, then it must be closing. So stack 
            cannot be empty at this point. 
        */

            if (st.isEmpty()) {
                return false;
            }

            // Store the top element.
            x = st.pop();

            // Check for opening braces in stack of corresponding closing braces.
            switch (s.charAt(i)) {
                case ')':

                    if (x == '{' || x == '[') {
                        return false;
                    }
                    break;

                case '}':

                    if (x == '(' || x == '[') {
                        return false;
                    }
                    break;

                case ']':

                    if (x == '(' || x == '{') {
                        return false;
                    }
                    break;
            }
        }

        // Check Empty Stack.
        return (st.isEmpty());
    }
}
